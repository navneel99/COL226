type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | ABS
  | TILDA
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | COMMA
  | PROJ
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
# 33 "a3.ml"
let yytransl_const = [|
  260 (* ABS *);
  261 (* TILDA *);
  262 (* NOT *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* REM *);
  268 (* CONJ *);
  269 (* DISJ *);
  270 (* EQ *);
  271 (* GT *);
  272 (* LT *);
  273 (* LP *);
  274 (* RP *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* FI *);
  279 (* COMMA *);
  280 (* PROJ *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\004\000\004\000\005\000\
\005\000\006\000\006\000\007\000\007\000\008\000\008\000\009\000\
\009\000\010\000\010\000\010\000\011\000\011\000\011\000\012\000\
\012\000\003\000\003\000\015\000\015\000\016\000\016\000\014\000\
\014\000\013\000\013\000\013\000\013\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\002\000\001\000\002\000\
\001\000\004\000\003\000\001\000\004\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\002\000\001\000\007\000\
\001\000\001\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\035\000\036\000\034\000\000\000\000\000\000\000\
\000\000\000\000\003\000\038\000\001\000\002\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\014\000\025\000\016\000\031\000\030\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\004\000\006\000\
\008\000\010\000\012\000\000\000\000\000\000\000\000\000\024\000\
\026\000\028\000\000\000\000\000\000\000\000\000\000\000\032\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\029\000\026\000\027\000"

let yysindex = "\004\000\
\193\000\000\000\000\000\000\000\000\000\017\255\017\255\029\255\
\193\000\029\255\000\000\000\000\000\000\000\000\254\254\003\255\
\014\255\015\255\013\255\000\000\026\255\011\255\030\255\000\000\
\000\000\016\255\034\255\000\000\000\000\000\000\000\000\000\000\
\035\255\039\255\017\255\017\255\017\255\017\255\017\255\049\255\
\055\255\012\255\029\255\029\255\000\000\193\000\000\000\000\000\
\000\000\000\000\000\000\074\255\011\255\074\255\030\255\000\000\
\000\000\000\000\033\255\011\255\030\255\193\000\038\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\000\133\000\
\138\000\154\000\159\000\000\000\113\000\065\000\017\000\000\000\
\001\000\171\000\166\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\000\000\033\000\000\000\
\000\000\000\000\000\000\097\000\049\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\249\255\005\000\250\255\026\000\027\000\029\000\031\000\000\000\
\000\000\000\000\242\255\218\255\036\000\255\255\035\000\063\000"

let yytablesize = 468
let yytable = "\025\000\
\025\000\033\000\055\000\034\000\001\000\035\000\031\000\025\000\
\031\000\036\000\028\000\030\000\003\000\004\000\005\000\061\000\
\023\000\003\000\004\000\005\000\006\000\007\000\037\000\039\000\
\038\000\053\000\041\000\043\000\009\000\003\000\004\000\005\000\
\022\000\009\000\008\000\010\000\057\000\060\000\059\000\047\000\
\040\000\031\000\031\000\042\000\025\000\009\000\044\000\010\000\
\021\000\003\000\004\000\005\000\045\000\062\000\063\000\003\000\
\004\000\005\000\046\000\064\000\025\000\048\000\052\000\049\000\
\020\000\009\000\050\000\010\000\054\000\051\000\032\000\009\000\
\000\000\010\000\003\000\004\000\005\000\056\000\058\000\000\000\
\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\010\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\025\000\025\000\025\000\025\000\031\000\031\000\025\000\025\000\
\025\000\000\000\025\000\000\000\000\000\025\000\025\000\023\000\
\023\000\023\000\023\000\023\000\000\000\000\000\000\000\023\000\
\023\000\000\000\023\000\000\000\000\000\023\000\023\000\022\000\
\022\000\022\000\022\000\022\000\000\000\000\000\000\000\022\000\
\022\000\000\000\022\000\000\000\000\000\022\000\022\000\021\000\
\021\000\021\000\021\000\021\000\000\000\000\000\000\000\021\000\
\021\000\000\000\021\000\000\000\000\000\021\000\021\000\020\000\
\020\000\020\000\020\000\020\000\000\000\000\000\000\000\020\000\
\000\000\000\000\020\000\000\000\000\000\020\000\020\000\019\000\
\019\000\019\000\019\000\019\000\000\000\000\000\000\000\019\000\
\000\000\000\000\019\000\000\000\000\000\019\000\019\000\018\000\
\018\000\018\000\018\000\018\000\000\000\000\000\000\000\018\000\
\000\000\000\000\018\000\000\000\000\000\018\000\018\000\017\000\
\017\000\017\000\017\000\017\000\005\000\000\000\005\000\005\000\
\005\000\000\000\017\000\000\000\000\000\017\000\017\000\005\000\
\000\000\000\000\005\000\005\000\007\000\007\000\007\000\007\000\
\009\000\009\000\000\000\009\000\009\000\000\000\007\000\000\000\
\000\000\007\000\007\000\009\000\000\000\000\000\009\000\009\000\
\011\000\011\000\011\000\000\000\011\000\013\000\013\000\013\000\
\013\000\000\000\000\000\011\000\000\000\000\000\011\000\011\000\
\013\000\029\000\000\000\013\000\013\000\000\000\000\000\029\000\
\000\000\029\000\029\000\029\000\027\000\000\000\027\000\027\000\
\027\000\003\000\004\000\005\000\006\000\007\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\000\000\010\000"

let yycheck = "\001\000\
\000\000\009\000\041\000\010\000\001\000\008\001\008\000\009\000\
\010\000\007\001\006\000\007\000\001\001\002\001\003\001\054\000\
\000\000\001\001\002\001\003\001\004\001\005\001\009\001\011\001\
\010\001\040\000\016\001\012\001\017\001\001\001\002\001\003\001\
\000\000\017\001\006\001\019\001\043\000\052\000\046\000\035\000\
\015\001\043\000\044\000\014\001\046\000\017\001\013\001\019\001\
\000\000\001\001\002\001\003\001\018\001\021\001\062\000\001\001\
\002\001\003\001\020\001\022\001\062\000\036\000\014\001\037\000\
\000\000\017\001\038\000\019\001\014\001\039\000\008\000\017\001\
\255\255\019\001\001\001\002\001\003\001\042\000\044\000\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\255\255\255\255\021\001\022\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\255\255\255\255\021\001\022\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\255\255\255\255\021\001\022\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\255\255\255\255\021\001\022\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\018\001\255\255\255\255\021\001\022\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\018\001\255\255\255\255\021\001\022\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\018\001\255\255\255\255\021\001\022\001\007\001\
\008\001\009\001\010\001\011\001\007\001\255\255\009\001\010\001\
\011\001\255\255\018\001\255\255\255\255\021\001\022\001\018\001\
\255\255\255\255\021\001\022\001\008\001\009\001\010\001\011\001\
\007\001\008\001\255\255\010\001\011\001\255\255\018\001\255\255\
\255\255\021\001\022\001\018\001\255\255\255\255\021\001\022\001\
\007\001\008\001\009\001\255\255\011\001\007\001\008\001\009\001\
\010\001\255\255\255\255\018\001\255\255\255\255\021\001\022\001\
\018\001\012\001\255\255\021\001\022\001\255\255\255\255\018\001\
\255\255\020\001\021\001\022\001\018\001\255\255\020\001\021\001\
\022\001\001\001\002\001\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\019\001"

let yynames_const = "\
  ABS\000\
  TILDA\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  COMMA\000\
  PROJ\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 27 "a3.mly"
              ( _1 )
# 278 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 28 "a3.mly"
             ( _1 )
# 285 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "a3.mly"
        ( Done )
# 291 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 32 "a3.mly"
                            ( Sub(_1,_3) )
# 299 "a3.ml"
               : 'sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_expr) in
    Obj.repr(
# 33 "a3.mly"
                            ( _1 )
# 306 "a3.ml"
               : 'sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_expr) in
    Obj.repr(
# 37 "a3.mly"
                             ( Add(_1,_3) )
# 314 "a3.ml"
               : 'add_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expr) in
    Obj.repr(
# 38 "a3.mly"
                            ( _1 )
# 321 "a3.ml"
               : 'add_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expr) in
    Obj.repr(
# 42 "a3.mly"
                              ( Mult(_1,_3) )
# 329 "a3.ml"
               : 'mult_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_expr) in
    Obj.repr(
# 43 "a3.mly"
                           ( _1 )
# 336 "a3.ml"
               : 'mult_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_expr) in
    Obj.repr(
# 47 "a3.mly"
                           ( Div(_1,_3) )
# 344 "a3.ml"
               : 'div_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expr) in
    Obj.repr(
# 48 "a3.mly"
                           ( _1 )
# 351 "a3.ml"
               : 'div_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'abs_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expr) in
    Obj.repr(
# 51 "a3.mly"
                          ( Rem(_1,_3) )
# 359 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 52 "a3.mly"
                          ( _1 )
# 366 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 55 "a3.mly"
                          ( Abs(_2) )
# 373 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neg_expr) in
    Obj.repr(
# 56 "a3.mly"
                          ( _1 )
# 380 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 59 "a3.mly"
                          ( Negative(_2) )
# 387 "a3.ml"
               : 'neg_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gt_expr) in
    Obj.repr(
# 61 "a3.mly"
                          ( _1 )
# 394 "a3.ml"
               : 'neg_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'gt_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lt_expr) in
    Obj.repr(
# 65 "a3.mly"
                          ( GreaterTE(_1,_4) )
# 402 "a3.ml"
               : 'gt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gt_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lt_expr) in
    Obj.repr(
# 66 "a3.mly"
                         ( GreaterT(_1,_3) )
# 410 "a3.ml"
               : 'gt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lt_expr) in
    Obj.repr(
# 67 "a3.mly"
                         ( _1 )
# 417 "a3.ml"
               : 'gt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lt_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'eq_expr) in
    Obj.repr(
# 71 "a3.mly"
                          ( LessTE(_1,_4) )
# 425 "a3.ml"
               : 'lt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lt_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'eq_expr) in
    Obj.repr(
# 72 "a3.mly"
                        ( LessT(_1,_3) )
# 433 "a3.ml"
               : 'lt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eq_expr) in
    Obj.repr(
# 73 "a3.mly"
                       ( _1 )
# 440 "a3.ml"
               : 'lt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'eq_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 76 "a3.mly"
                          ( Equals(_1,_3) )
# 448 "a3.ml"
               : 'eq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 77 "a3.mly"
                           ( _1 )
# 455 "a3.ml"
               : 'eq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 91 "a3.mly"
                          ( Conjunction(_1,_3) )
# 463 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 92 "a3.mly"
                          ( _1 )
# 470 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'not_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 95 "a3.mly"
                          ( Disjunction(_1,_3) )
# 478 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 96 "a3.mly"
                          ( _1 )
# 485 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 99 "a3.mly"
                          ( Not(_2) )
# 492 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 100 "a3.mly"
                           ( _1 )
# 499 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'or_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : A1.exptree) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 105 "a3.mly"
                                      ( IfThenElse(_2,_4,_6) )
# 508 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 106 "a3.mly"
                                      ( _1 )
# 515 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "a3.mly"
                           ( Var(_1) )
# 522 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 111 "a3.mly"
                           ( N(_1) )
# 529 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 112 "a3.mly"
                            ( B(_1) )
# 536 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 113 "a3.mly"
                            ( InParen(_2) )
# 543 "a3.ml"
               : 'constant))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.exptree)
