### Starting build.
# Target: a0.mli.depends, tags: { extension:mli, file:a0.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a0.mli > a0.mli.depends # cached
# Target: a0.cmi, tags: { byte, compile, extension:mli, file:a0.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a0.cmi a0.mli # cached
# Target: a0.ml.depends, tags: { extension:ml, file:a0.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a0.ml > a0.ml.depends
# Target: a0.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:a0.cmo, file:a0.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a0.cmo a0.ml
+ /usr/bin/ocamlc.opt -c -o a0.cmo a0.ml
File "a0.ml", line 29, characters 41-212:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
((_::_, [])|([], _::_))
File "a0.ml", line 43, characters 16-154:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
((_::_, [])|([], _::_))
File "a0.ml", line 93, characters 26-294:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
([], _::_, _)
# Target: a1.mli.depends, tags: { extension:mli, file:a1.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a1.mli > a1.mli.depends # cached
# Target: a1.cmi, tags: { byte, compile, extension:mli, file:a1.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a1.cmi a1.mli # cached
# Target: a1.ml.depends, tags: { extension:ml, file:a1.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a1.ml > a1.ml.depends # cached
# Target: a1.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:a1.cmo, file:a1.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a1.cmo a1.ml # cached
# Compilation successful.
