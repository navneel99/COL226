### Starting build.
# Target: a0.mli.depends, tags: { extension:mli, file:a0.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a0.mli > a0.mli.depends
# Target: a0.cmi, tags: { byte, compile, extension:mli, file:a0.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a0.cmi a0.mli
# Target: a0.ml.depends, tags: { extension:ml, file:a0.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a0.ml > a0.ml.depends
# Target: a0.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:a0.cmo, file:a0.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a0.cmo a0.ml
+ /usr/bin/ocamlc.opt -c -o a0.cmo a0.ml
File "a0.ml", line 29, characters 41-212:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
((_::_, [])|([], _::_))
File "a0.ml", line 43, characters 16-154:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
((_::_, [])|([], _::_))
File "a0.ml", line 93, characters 26-294:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
([], _::_, _)
# Target: a1.mli.depends, tags: { extension:mli, file:a1.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a1.mli > a1.mli.depends
# Target: a1.cmi, tags: { byte, compile, extension:mli, file:a1.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a1.cmi a1.mli
# Target: a1.ml.depends, tags: { extension:ml, file:a1.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a1.ml > a1.ml.depends
# Target: a1.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:a1.cmo, file:a1.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a1.cmo a1.ml
+ /usr/bin/ocamlc.opt -c -o a1.cmo a1.ml
File "a1.ml", line 68, characters 25-94:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
([], _)
File "a1.ml", line 79, characters 22-6222:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Let (_, _)|FunctionAbstraction (_, _)|FunctionCall (_, _))
File "a1.ml", line 170, characters 22-1380:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Let (_, _)|FunctionAbstraction (_, _)|FunctionCall (_, _))
File "a1.ml", line 197, characters 19-405:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(PLUS|MINUS|MULT|DIV|REM|CONJ|DISJ|EQS|GTE|LTE|GT|LT|IFTE|LET|FABS|FCALL|
SIMPLEDEF|SEQCOMPOSE|PARCOMPOSE|LOCALDEF|VAR _|NCONST _|BCONST _|TUPLE _|
PROJ (_, _))
File "a1.ml", line 209, characters 21-1539:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(ABS|UNARYMINUS|NOT|PAREN|IFTE|LET|FABS|FCALL|SIMPLEDEF|SEQCOMPOSE|
PARCOMPOSE|LOCALDEF|VAR _|NCONST _|BCONST _|TUPLE _|PROJ (_, _))
File "a1.ml", line 248, characters 25-141:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(1, [])
File "a1.ml", line 251, characters 34-153:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(1, [])
File "a1.ml", line 264, characters 95-256:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(_::[]|[])
File "a1.ml", line 266, characters 26-142:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(_::_::[]|_::[]|[])
File "a1.ml", line 257, characters 17-1340:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(LET|FABS|FCALL|SIMPLEDEF|SEQCOMPOSE|PARCOMPOSE|LOCALDEF)
# Target: a2.mll, tags: { extension:mll, file:a2.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex.opt -q a2.mll
# Target: a2.ml.depends, tags: { extension:ml, file:a2.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a2.ml > a2.ml.depends
# Target: a3.mly, tags: { extension:mly, file:a3.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc a3.mly
# Target: a3.mli.depends, tags: { extension:mli, file:a3.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a3.mli > a3.mli.depends
# Target: a3.cmi, tags: { byte, compile, extension:mli, file:a3.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a3.cmi a3.mli
# Target: a2.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:a2.cmo, file:a2.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a2.cmo a2.ml
# Target: a3.ml.depends, tags: { extension:ml, file:a3.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a3.ml > a3.ml.depends
# Target: a3.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:a3.cmo, file:a3.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a3.cmo a3.ml
# Target: a4.mli.depends, tags: { extension:mli, file:a4.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a4.mli > a4.mli.depends
# Target: a4.cmi, tags: { byte, compile, extension:mli, file:a4.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a4.cmi a4.mli
# Target: a4.ml.depends, tags: { extension:ml, file:a4.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules a4.ml > a4.ml.depends
# Target: a4.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:a4.cmo, file:a4.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o a4.cmo a4.ml
+ /usr/bin/ocamlc.opt -c -o a4.cmo a4.ml
File "a4.ml", line 16, characters 26-145:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(_, [])
File "a4.ml", line 29, characters 21-1573:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Let (_, _)
# Compilation successful.
