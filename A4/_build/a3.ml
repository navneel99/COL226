type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | TYPE of (string)
  | ABS
  | TILDA
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | COMMA
  | PROJ
  | LET
  | IN
  | END
  | BACKSLASH
  | DOT
  | DEF
  | SEMICOLON
  | COLON
  | PARALLEL
  | LOCAL
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
    exception TypeError
# 45 "a3.ml"
let yytransl_const = [|
  261 (* ABS *);
  262 (* TILDA *);
  263 (* NOT *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIV *);
  268 (* REM *);
  269 (* CONJ *);
  270 (* DISJ *);
  271 (* EQ *);
  272 (* GT *);
  273 (* LT *);
  274 (* LP *);
  275 (* RP *);
  276 (* IF *);
  277 (* THEN *);
  278 (* ELSE *);
  279 (* FI *);
  280 (* COMMA *);
  281 (* PROJ *);
  282 (* LET *);
  283 (* IN *);
  284 (* END *);
  285 (* BACKSLASH *);
  286 (* DOT *);
  287 (* DEF *);
  288 (* SEMICOLON *);
  289 (* COLON *);
  290 (* PARALLEL *);
  291 (* LOCAL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
  260 (* TYPE *);
    0|]

let yylhs = "\255\255\
\003\000\003\000\004\000\004\000\004\000\005\000\005\000\006\000\
\006\000\002\000\007\000\007\000\008\000\008\000\009\000\009\000\
\011\000\011\000\012\000\012\000\012\000\013\000\013\000\013\000\
\014\000\014\000\014\000\015\000\015\000\015\000\015\000\016\000\
\016\000\016\000\017\000\017\000\018\000\018\000\019\000\019\000\
\020\000\020\000\022\000\022\000\023\000\023\000\023\000\024\000\
\024\000\025\000\025\000\010\000\010\000\010\000\001\000\026\000\
\026\000\021\000\021\000\021\000\027\000\027\000\000\000\000\000\
\000\000"

let yylen = "\002\000\
\004\000\001\000\003\000\002\000\001\000\003\000\003\000\001\000\
\003\000\002\000\003\000\001\000\003\000\001\000\002\000\001\000\
\003\000\001\000\004\000\003\000\001\000\004\000\003\000\001\000\
\003\000\003\000\001\000\003\000\003\000\003\000\001\000\002\000\
\002\000\001\000\007\000\001\000\004\000\001\000\006\000\001\000\
\005\000\001\000\007\000\001\000\003\000\002\000\001\000\003\000\
\003\000\003\000\001\000\001\000\001\000\001\000\002\000\005\000\
\001\000\001\000\003\000\003\000\006\000\003\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\000\000\058\000\057\000\053\000\054\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\000\
\000\000\014\000\051\000\000\000\000\000\000\000\000\000\000\000\
\031\000\034\000\036\000\000\000\040\000\042\000\044\000\047\000\
\008\000\000\000\000\000\002\000\005\000\000\000\000\000\000\000\
\000\000\000\000\055\000\033\000\032\000\015\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\062\000\000\000\000\000\
\060\000\059\000\050\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\030\000\028\000\000\000\000\000\009\000\
\003\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\007\000\001\000\
\000\000\056\000\000\000\000\000\041\000\000\000\000\000\000\000\
\000\000\039\000\035\000\043\000"

let yydgoto = "\004\000\
\008\000\023\000\043\000\044\000\076\000\045\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\009\000\038\000\039\000\057\000\
\040\000\010\000\011\000"

let yysindex = "\117\000\
\007\255\075\255\010\255\000\000\007\255\040\255\007\255\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\170\255\170\255\
\120\255\029\255\075\255\028\255\007\255\103\255\000\000\007\000\
\102\255\000\000\000\000\117\255\113\255\118\255\009\255\140\255\
\000\000\000\000\000\000\121\255\000\000\000\000\000\000\000\000\
\000\000\008\255\126\255\000\000\000\000\037\255\105\255\114\255\
\007\255\007\255\000\000\000\000\000\000\000\000\000\000\060\255\
\129\255\045\255\144\255\065\255\122\255\075\255\000\000\075\255\
\170\255\111\255\141\255\170\255\170\255\170\255\170\255\170\255\
\075\255\000\000\054\255\134\255\138\255\000\000\010\255\007\255\
\000\000\000\000\000\000\075\255\000\000\075\255\133\255\075\255\
\010\255\102\255\000\000\113\255\170\255\118\255\170\255\009\255\
\140\255\140\255\000\000\000\000\000\000\089\255\010\255\000\000\
\000\000\010\255\035\255\062\255\074\255\000\000\069\255\157\255\
\005\255\255\254\118\255\009\255\000\000\115\255\000\000\000\000\
\075\255\000\000\075\255\143\255\000\000\084\255\146\255\001\255\
\019\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\245\000\000\000\000\000\229\000\197\000\149\000\089\000\023\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\163\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\001\000\000\213\000\000\000\165\000\000\000\111\000\
\045\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\145\255\000\000\000\000\000\000\
\000\000\000\000\181\000\133\000\000\000\149\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\001\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\218\255\063\000\071\000\000\000\240\255\115\000\
\114\000\162\000\000\000\118\000\203\255\200\255\059\000\246\255\
\000\000\000\000\000\000\054\000\251\255\000\000\053\000\100\000\
\000\000\003\000\000\000"

let yytablesize = 565
let yytable = "\046\000\
\038\000\056\000\058\000\075\000\052\000\053\000\063\000\077\000\
\051\000\048\000\096\000\041\000\094\000\041\000\062\000\060\000\
\068\000\069\000\062\000\012\000\013\000\014\000\027\000\131\000\
\005\000\042\000\074\000\042\000\126\000\012\000\013\000\014\000\
\125\000\015\000\016\000\017\000\018\000\006\000\116\000\115\000\
\107\000\007\000\047\000\077\000\026\000\059\000\018\000\055\000\
\019\000\121\000\114\000\081\000\082\000\020\000\021\000\078\000\
\102\000\022\000\062\000\099\000\100\000\101\000\077\000\103\000\
\118\000\086\000\025\000\109\000\049\000\111\000\050\000\113\000\
\104\000\062\000\108\000\012\000\013\000\014\000\083\000\015\000\
\016\000\017\000\062\000\084\000\012\000\013\000\014\000\062\000\
\024\000\122\000\123\000\088\000\018\000\049\000\019\000\050\000\
\049\000\084\000\050\000\020\000\021\000\018\000\062\000\022\000\
\127\000\061\000\128\000\117\000\020\000\021\000\023\000\012\000\
\013\000\014\000\064\000\015\000\016\000\001\000\002\000\003\000\
\012\000\013\000\014\000\077\000\103\000\093\000\097\000\098\000\
\018\000\066\000\019\000\065\000\022\000\067\000\077\000\020\000\
\021\000\079\000\073\000\022\000\080\000\012\000\013\000\014\000\
\087\000\015\000\016\000\085\000\021\000\070\000\071\000\072\000\
\105\000\106\000\089\000\095\000\112\000\124\000\018\000\062\000\
\019\000\129\000\065\000\048\000\020\000\020\000\021\000\006\000\
\120\000\022\000\012\000\013\000\014\000\119\000\015\000\016\000\
\090\000\091\000\054\000\130\000\019\000\132\000\092\000\110\000\
\000\000\000\000\000\000\018\000\000\000\019\000\000\000\000\000\
\000\000\000\000\020\000\021\000\018\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\061\000\038\000\062\000\038\000\038\000\038\000\
\038\000\000\000\000\000\038\000\038\000\000\000\027\000\027\000\
\038\000\000\000\038\000\027\000\027\000\027\000\027\000\027\000\
\049\000\027\000\050\000\027\000\027\000\027\000\027\000\000\000\
\000\000\027\000\027\000\000\000\026\000\026\000\027\000\000\000\
\027\000\026\000\026\000\026\000\026\000\026\000\000\000\026\000\
\000\000\026\000\026\000\026\000\026\000\000\000\000\000\026\000\
\026\000\000\000\025\000\025\000\026\000\000\000\026\000\025\000\
\025\000\025\000\025\000\025\000\000\000\025\000\000\000\025\000\
\025\000\025\000\025\000\000\000\000\000\025\000\025\000\000\000\
\000\000\000\000\025\000\000\000\025\000\024\000\024\000\024\000\
\024\000\024\000\000\000\024\000\000\000\024\000\024\000\024\000\
\024\000\000\000\000\000\024\000\024\000\000\000\000\000\000\000\
\024\000\000\000\024\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\000\000\023\000\023\000\023\000\023\000\000\000\
\000\000\023\000\023\000\000\000\000\000\000\000\023\000\000\000\
\023\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\000\000\022\000\022\000\022\000\022\000\000\000\000\000\022\000\
\022\000\021\000\021\000\021\000\022\000\021\000\022\000\021\000\
\000\000\021\000\021\000\021\000\021\000\000\000\000\000\021\000\
\021\000\020\000\020\000\020\000\021\000\020\000\021\000\020\000\
\000\000\020\000\020\000\020\000\020\000\000\000\000\000\020\000\
\020\000\019\000\019\000\019\000\020\000\019\000\020\000\019\000\
\000\000\019\000\019\000\019\000\019\000\000\000\000\000\019\000\
\019\000\018\000\018\000\018\000\019\000\000\000\019\000\018\000\
\000\000\018\000\018\000\018\000\018\000\000\000\000\000\018\000\
\018\000\017\000\017\000\017\000\018\000\000\000\018\000\017\000\
\000\000\017\000\017\000\017\000\017\000\000\000\000\000\017\000\
\017\000\016\000\016\000\000\000\017\000\000\000\017\000\016\000\
\000\000\016\000\016\000\016\000\016\000\000\000\000\000\016\000\
\016\000\000\000\012\000\000\000\016\000\000\000\016\000\012\000\
\000\000\012\000\012\000\012\000\012\000\000\000\000\000\012\000\
\012\000\000\000\011\000\000\000\012\000\000\000\012\000\011\000\
\000\000\011\000\011\000\011\000\011\000\000\000\000\000\011\000\
\011\000\000\000\000\000\000\000\011\000\061\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\061\000\000\000\
\000\000\000\000\061\000\000\000\061\000"

let yycheck = "\005\000\
\000\000\018\000\019\000\042\000\015\000\016\000\000\000\009\001\
\000\000\007\000\067\000\004\001\066\000\004\001\014\001\021\000\
\008\001\009\001\014\001\001\001\002\001\003\001\000\000\023\001\
\018\001\018\001\019\001\018\001\030\001\001\001\002\001\003\001\
\028\001\005\001\006\001\007\001\018\001\031\001\095\000\093\000\
\079\000\035\001\003\001\009\001\000\000\018\001\018\001\019\001\
\020\001\015\001\089\000\049\000\050\000\025\001\026\001\019\001\
\073\000\029\001\014\001\070\000\071\000\072\000\009\001\010\001\
\103\000\021\001\000\000\084\000\032\001\086\000\034\001\088\000\
\019\001\014\001\080\000\001\001\002\001\003\001\019\001\005\001\
\006\001\007\001\014\001\024\001\001\001\002\001\003\001\014\001\
\000\000\028\001\022\001\027\001\018\001\032\001\020\001\034\001\
\032\001\024\001\034\001\025\001\026\001\018\001\014\001\029\001\
\121\000\003\001\123\000\019\001\025\001\026\001\000\000\001\001\
\002\001\003\001\013\001\005\001\006\001\001\000\002\000\003\000\
\001\001\002\001\003\001\009\001\010\001\015\001\068\000\069\000\
\018\001\017\001\020\001\015\001\000\000\016\001\009\001\025\001\
\026\001\033\001\018\001\029\001\027\001\001\001\002\001\003\001\
\001\001\005\001\006\001\019\001\000\000\010\001\011\001\012\001\
\019\001\016\001\033\001\015\001\024\001\001\001\018\001\014\001\
\020\001\019\001\000\000\019\001\000\000\025\001\026\001\019\001\
\106\000\029\001\001\001\002\001\003\001\103\000\005\001\006\001\
\062\000\064\000\017\000\126\000\000\000\129\000\065\000\084\000\
\255\255\255\255\255\255\018\001\255\255\020\001\255\255\255\255\
\255\255\255\255\025\001\026\001\000\000\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\014\001\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\028\001\255\255\008\001\009\001\
\032\001\255\255\034\001\013\001\014\001\015\001\016\001\017\001\
\032\001\019\001\034\001\021\001\022\001\023\001\024\001\255\255\
\255\255\027\001\028\001\255\255\008\001\009\001\032\001\255\255\
\034\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\255\255\008\001\009\001\032\001\255\255\034\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\255\255\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\255\255\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\028\001\255\255\255\255\255\255\
\032\001\255\255\034\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\255\255\021\001\022\001\023\001\024\001\255\255\
\255\255\027\001\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\013\001\014\001\015\001\032\001\017\001\034\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\013\001\014\001\015\001\032\001\017\001\034\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\013\001\014\001\015\001\032\001\017\001\034\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\013\001\014\001\015\001\032\001\255\255\034\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\013\001\014\001\015\001\032\001\255\255\034\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\013\001\014\001\255\255\032\001\255\255\034\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\255\255\014\001\255\255\032\001\255\255\034\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\255\255\014\001\255\255\032\001\255\255\034\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\255\255\255\255\255\255\032\001\019\001\034\001\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001"

let yynames_const = "\
  ABS\000\
  TILDA\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  COMMA\000\
  PROJ\000\
  LET\000\
  IN\000\
  END\000\
  BACKSLASH\000\
  DOT\000\
  DEF\000\
  SEMICOLON\000\
  COLON\000\
  PARALLEL\000\
  LOCAL\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  TYPE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : A1.exptype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tupType_expr) in
    Obj.repr(
# 29 "a3.mly"
                                      ( Tfunc(_1,_4))
# 376 "a3.ml"
               : A1.exptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tupType_expr) in
    Obj.repr(
# 30 "a3.mly"
                 ( _1 )
# 383 "a3.ml"
               : A1.exptype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'remType_par) in
    Obj.repr(
# 33 "a3.mly"
                      (Ttuple(_2))
# 390 "a3.ml"
               : 'tupType_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "a3.mly"
          (Ttuple([]))
# 396 "a3.ml"
               : 'tupType_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'base_expr) in
    Obj.repr(
# 35 "a3.mly"
              ( _1 )
# 403 "a3.ml"
               : 'tupType_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A1.exptype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A1.exptype) in
    Obj.repr(
# 38 "a3.mly"
                                  ( [_1;_3])
# 411 "a3.ml"
               : 'remType_par))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A1.exptype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'remType_par) in
    Obj.repr(
# 39 "a3.mly"
                                  ( _1::_3 )
# 419 "a3.ml"
               : 'remType_par))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "a3.mly"
         ( match _1 with 
            | "Tunit" -> Tunit
            | "Tint" -> Tint
            | "Tbool" -> Tbool
          )
# 430 "a3.ml"
               : 'base_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A1.exptype) in
    Obj.repr(
# 58 "a3.mly"
                      ( _2 )
# 437 "a3.ml"
               : 'base_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 63 "a3.mly"
                 ( _1 )
# 444 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 66 "a3.mly"
                          ( Disjunction(_1,_3) )
# 452 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 67 "a3.mly"
                          ( _1 )
# 459 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 70 "a3.mly"
                          ( Conjunction(_1,_3) )
# 467 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 71 "a3.mly"
                          ( _1 )
# 474 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 75 "a3.mly"
                          ( Not(_2) )
# 481 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eq_expr) in
    Obj.repr(
# 76 "a3.mly"
                        ( _1 )
# 488 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'eq_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lt_expr) in
    Obj.repr(
# 80 "a3.mly"
                         ( Equals(_1,_3) )
# 496 "a3.ml"
               : 'eq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lt_expr) in
    Obj.repr(
# 81 "a3.mly"
                         ( _1 )
# 503 "a3.ml"
               : 'eq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lt_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gt_expr) in
    Obj.repr(
# 84 "a3.mly"
                          ( LessTE(_1,_4) )
# 511 "a3.ml"
               : 'lt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lt_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gt_expr) in
    Obj.repr(
# 85 "a3.mly"
                        ( LessT(_1,_3) )
# 519 "a3.ml"
               : 'lt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gt_expr) in
    Obj.repr(
# 86 "a3.mly"
                       ( _1 )
# 526 "a3.ml"
               : 'lt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'gt_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 90 "a3.mly"
                               ( GreaterTE(_1,_4) )
# 534 "a3.ml"
               : 'gt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gt_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 91 "a3.mly"
                              ( GreaterT(_1,_3) )
# 542 "a3.ml"
               : 'gt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 92 "a3.mly"
                              ( _1 )
# 549 "a3.ml"
               : 'gt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expr) in
    Obj.repr(
# 96 "a3.mly"
                                ( Sub(_1,_3) )
# 557 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expr) in
    Obj.repr(
# 97 "a3.mly"
                                ( Add(_1,_3) )
# 565 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expr) in
    Obj.repr(
# 98 "a3.mly"
                           ( _1 )
# 572 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 102 "a3.mly"
                          ( Rem(_1,_3) )
# 580 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 103 "a3.mly"
                            ( Mult(_1,_3) )
# 588 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 104 "a3.mly"
                          ( Div(_1,_3) )
# 596 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 105 "a3.mly"
                         ( _1 )
# 603 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 119 "a3.mly"
                           ( Negative(_2))
# 610 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 120 "a3.mly"
                         ( Abs(_2) )
# 617 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 121 "a3.mly"
                           ( _1 )
# 624 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'and_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'and_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 128 "a3.mly"
                                               ( IfThenElse(_2,_4,_6) )
# 633 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funCall_expr) in
    Obj.repr(
# 129 "a3.mly"
                                         ( _1 )
# 640 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'funAbs_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 134 "a3.mly"
                               (FunctionCall(_1,_3))
# 648 "a3.ml"
               : 'funCall_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funAbs_expr) in
    Obj.repr(
# 135 "a3.mly"
                ( _1 )
# 655 "a3.ml"
               : 'funCall_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : A1.exptype) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'let_expr) in
    Obj.repr(
# 138 "a3.mly"
                                                ( FunctionAbstraction((_2,_4),_6))
# 664 "a3.ml"
               : 'funAbs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_expr) in
    Obj.repr(
# 139 "a3.mly"
             ( _1 )
# 671 "a3.ml"
               : 'funAbs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'seq_def) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 143 "a3.mly"
                                ( Let(_2, _4) )
# 679 "a3.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj_expr) in
    Obj.repr(
# 144 "a3.mly"
              ( _1 )
# 686 "a3.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'tup_expr) in
    Obj.repr(
# 147 "a3.mly"
                                      ( Project((_3,_5),_7))
# 695 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tup_expr) in
    Obj.repr(
# 148 "a3.mly"
             ( _1 )
# 702 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rem_par) in
    Obj.repr(
# 152 "a3.mly"
                  ( let a,b = _2 in Tuple(a,b) )
# 709 "a3.ml"
               : 'tup_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "a3.mly"
             (Tuple(0,[]))
# 715 "a3.ml"
               : 'tup_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 154 "a3.mly"
               ( _1 )
# 722 "a3.ml"
               : 'tup_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 158 "a3.mly"
                           ( (2,[_1;_3]) )
# 730 "a3.ml"
               : 'rem_par))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_par) in
    Obj.repr(
# 159 "a3.mly"
                           (let x,y = _3 in (x+1,_1::y))
# 738 "a3.ml"
               : 'rem_par))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 163 "a3.mly"
                   ( InParen(_2) )
# 745 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 164 "a3.mly"
             ( _1 )
# 752 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 167 "a3.mly"
                           ( Var(_1) )
# 759 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 168 "a3.mly"
                           ( N(_1) )
# 766 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 169 "a3.mly"
                            ( B(_1) )
# 773 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seq_def) in
    Obj.repr(
# 175 "a3.mly"
                   ( _1 )
# 780 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'local_def) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_def) in
    Obj.repr(
# 181 "a3.mly"
                                   ( Local(_2, _4) )
# 788 "a3.ml"
               : 'local_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_def) in
    Obj.repr(
# 182 "a3.mly"
               ( _1 )
# 795 "a3.ml"
               : 'local_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 186 "a3.mly"
              ( _1 )
# 802 "a3.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'seq_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 187 "a3.mly"
                               ( match _1 with
                                    | Parallel(x) -> Parallel (x @ [_3])
                                    | Sequence(x) -> Parallel(_1 :: [_3])
                                    | _ -> Parallel([_1] @ [_3] ) 
                                     )
# 814 "a3.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'seq_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'local_def) in
    Obj.repr(
# 192 "a3.mly"
                                ( match _1 with 
                                    | Sequence(x) -> Sequence (x @ [_3])
                                    | Parallel(x) -> Sequence(_1 :: [_3])
                                    | _-> Sequence( [_1] @ [_3] )  )
# 825 "a3.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : A1.exptype) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 207 "a3.mly"
                                         ( Simple((_2,_4), _6) )
# 834 "a3.ml"
               : 'simple_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_def) in
    Obj.repr(
# 208 "a3.mly"
                   ( _2 )
# 841 "a3.ml"
               : 'simple_def))
(* Entry def_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry exp_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry type_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let def_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.definition)
let exp_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : A1.exptree)
let type_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : A1.exptype)
