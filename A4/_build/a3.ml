type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | ABS
  | TILDA
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | COMMA
  | PROJ
  | LET
  | IN
  | END
  | BACKSLASH
  | DOT
  | DEF
  | SEMICOLON
  | PARALLEL
  | LOCAL
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
    exception TypeError
# 43 "a3.ml"
let yytransl_const = [|
  260 (* ABS *);
  261 (* TILDA *);
  262 (* NOT *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* REM *);
  268 (* CONJ *);
  269 (* DISJ *);
  270 (* EQ *);
  271 (* GT *);
  272 (* LT *);
  273 (* LP *);
  274 (* RP *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* FI *);
  279 (* COMMA *);
  280 (* PROJ *);
  281 (* LET *);
  282 (* IN *);
  283 (* END *);
  284 (* BACKSLASH *);
  285 (* DOT *);
  286 (* DEF *);
  287 (* SEMICOLON *);
  288 (* PARALLEL *);
  289 (* LOCAL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\003\000\003\000\004\000\004\000\005\000\005\000\007\000\
\007\000\008\000\008\000\008\000\009\000\009\000\009\000\010\000\
\010\000\010\000\011\000\011\000\011\000\011\000\012\000\012\000\
\012\000\013\000\013\000\014\000\014\000\015\000\015\000\015\000\
\016\000\016\000\017\000\017\000\018\000\018\000\019\000\019\000\
\021\000\021\000\006\000\006\000\006\000\001\000\020\000\020\000\
\022\000\022\000\022\000\022\000\022\000\023\000\023\000\000\000\
\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\003\000\001\000\002\000\001\000\003\000\
\001\000\004\000\003\000\001\000\004\000\003\000\001\000\003\000\
\003\000\001\000\003\000\003\000\003\000\001\000\002\000\002\000\
\001\000\007\000\001\000\007\000\001\000\003\000\002\000\001\000\
\003\000\003\000\004\000\001\000\004\000\001\000\005\000\001\000\
\003\000\001\000\001\000\001\000\001\000\002\000\005\000\001\000\
\003\000\003\000\001\000\003\000\003\000\004\000\003\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
\048\000\000\000\044\000\045\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\
\005\000\042\000\000\000\000\000\000\000\000\000\000\000\022\000\
\025\000\027\000\029\000\032\000\000\000\038\000\040\000\000\000\
\000\000\000\000\046\000\000\000\000\000\024\000\023\000\006\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\053\000\000\000\
\052\000\000\000\041\000\000\000\030\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\021\000\019\000\000\000\000\000\000\000\
\000\000\034\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\035\000\047\000\000\000\000\000\039\000\000\000\000\000\
\000\000\026\000\028\000"

let yydgoto = "\003\000\
\007\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\051\000\
\036\000\037\000\038\000\008\000\039\000\009\000\010\000"

let yysindex = "\068\000\
\006\255\043\255\000\000\006\255\253\254\006\255\000\000\017\000\
\000\000\052\255\000\000\000\000\000\000\128\255\128\255\119\255\
\007\255\043\255\004\255\006\255\055\255\000\000\007\000\080\255\
\000\000\000\000\102\255\093\255\096\255\091\255\125\255\000\000\
\000\000\000\000\000\000\000\000\106\255\000\000\000\000\108\255\
\127\255\116\255\000\000\049\255\049\255\000\000\000\000\000\000\
\000\000\095\255\126\255\075\255\142\255\120\255\121\255\043\255\
\000\000\043\255\128\255\072\255\100\255\128\255\128\255\128\255\
\128\255\128\255\043\255\000\000\043\255\049\255\000\000\052\255\
\000\000\052\255\000\000\043\255\000\000\043\255\131\255\043\255\
\017\255\080\255\000\000\093\255\128\255\096\255\128\255\091\255\
\125\255\125\255\000\000\000\000\000\000\094\255\136\255\124\255\
\027\255\000\000\069\255\154\255\024\255\043\255\000\000\096\255\
\091\255\000\000\000\000\043\255\139\255\000\000\097\255\059\255\
\013\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\000\
\000\000\000\000\238\000\206\000\148\000\085\000\022\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\001\
\000\000\046\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\001\000\000\222\000\000\000\169\000\000\000\106\000\
\043\000\064\000\000\000\000\000\000\000\000\000\025\001\000\000\
\140\255\000\000\000\000\000\000\000\000\000\000\000\000\190\000\
\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\241\255\103\000\102\000\145\000\000\000\104\000\
\200\255\228\255\075\000\247\255\000\000\000\000\049\000\088\000\
\000\000\000\000\084\000\074\000\000\000\239\255\095\000"

let yytablesize = 585
let yytable = "\041\000\
\036\000\050\000\052\000\086\000\046\000\047\000\057\000\011\000\
\012\000\013\000\014\000\015\000\016\000\011\000\012\000\013\000\
\043\000\011\000\012\000\013\000\053\000\018\000\004\000\017\000\
\049\000\018\000\071\000\073\000\104\000\017\000\019\000\020\000\
\088\000\102\000\021\000\005\000\056\000\020\000\006\000\056\000\
\021\000\020\000\017\000\011\000\012\000\013\000\014\000\015\000\
\016\000\076\000\110\000\094\000\096\000\095\000\091\000\092\000\
\093\000\055\000\105\000\017\000\097\000\018\000\099\000\016\000\
\101\000\004\000\019\000\020\000\001\000\002\000\021\000\056\000\
\011\000\012\000\013\000\014\000\015\000\040\000\005\000\042\000\
\114\000\056\000\044\000\045\000\015\000\085\000\111\000\056\000\
\017\000\108\000\018\000\058\000\112\000\054\000\078\000\019\000\
\020\000\062\000\063\000\021\000\011\000\012\000\013\000\014\000\
\015\000\014\000\056\000\056\000\060\000\056\000\061\000\106\000\
\075\000\087\000\075\000\059\000\017\000\076\000\018\000\011\000\
\012\000\013\000\067\000\019\000\020\000\068\000\013\000\021\000\
\011\000\012\000\013\000\014\000\015\000\064\000\065\000\066\000\
\089\000\090\000\072\000\074\000\069\000\070\000\079\000\077\000\
\017\000\080\000\018\000\012\000\056\000\081\000\107\000\019\000\
\020\000\100\000\109\000\021\000\113\000\033\000\082\000\083\000\
\048\000\115\000\084\000\098\000\103\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\002\000\036\000\056\000\036\000\036\000\036\000\036\000\
\054\000\000\000\036\000\036\000\018\000\018\000\000\000\036\000\
\036\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\049\000\018\000\018\000\018\000\018\000\050\000\000\000\018\000\
\018\000\017\000\017\000\000\000\018\000\018\000\017\000\017\000\
\017\000\017\000\017\000\000\000\017\000\000\000\017\000\017\000\
\017\000\017\000\000\000\000\000\017\000\017\000\016\000\016\000\
\000\000\017\000\017\000\016\000\016\000\016\000\016\000\016\000\
\000\000\016\000\000\000\016\000\016\000\016\000\016\000\000\000\
\000\000\016\000\016\000\000\000\000\000\000\000\016\000\016\000\
\015\000\015\000\015\000\015\000\015\000\000\000\015\000\000\000\
\015\000\015\000\015\000\015\000\000\000\000\000\015\000\015\000\
\000\000\000\000\000\000\015\000\015\000\014\000\014\000\014\000\
\014\000\014\000\000\000\014\000\000\000\014\000\014\000\014\000\
\014\000\000\000\000\000\014\000\014\000\000\000\000\000\000\000\
\014\000\014\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\000\000\013\000\013\000\013\000\013\000\000\000\000\000\
\013\000\013\000\000\000\000\000\000\000\013\000\013\000\012\000\
\012\000\012\000\000\000\012\000\000\000\012\000\000\000\012\000\
\012\000\012\000\012\000\000\000\000\000\012\000\012\000\000\000\
\000\000\000\000\012\000\012\000\011\000\011\000\011\000\000\000\
\011\000\000\000\011\000\000\000\011\000\011\000\011\000\011\000\
\000\000\000\000\011\000\011\000\000\000\000\000\000\000\011\000\
\011\000\010\000\010\000\010\000\000\000\010\000\000\000\010\000\
\000\000\010\000\010\000\010\000\010\000\000\000\000\000\010\000\
\010\000\009\000\009\000\009\000\010\000\010\000\000\000\009\000\
\000\000\009\000\009\000\009\000\009\000\000\000\000\000\009\000\
\009\000\008\000\008\000\008\000\009\000\009\000\000\000\008\000\
\000\000\008\000\008\000\008\000\008\000\000\000\000\000\008\000\
\008\000\007\000\007\000\000\000\008\000\008\000\000\000\007\000\
\000\000\007\000\007\000\007\000\007\000\000\000\000\000\007\000\
\007\000\003\000\000\000\000\000\007\000\007\000\003\000\000\000\
\003\000\003\000\003\000\003\000\000\000\000\000\003\000\003\000\
\051\000\000\000\000\000\003\000\003\000\000\000\002\000\000\000\
\051\000\051\000\000\000\002\000\000\000\002\000\002\000\002\000\
\002\000\000\000\054\000\002\000\002\000\000\000\000\000\000\000\
\002\000\002\000\054\000\054\000\000\000\000\000\000\000\054\000\
\054\000\000\000\049\000\000\000\000\000\000\000\000\000\050\000\
\000\000\000\000\049\000\049\000\000\000\000\000\000\000\050\000\
\050\000"

let yycheck = "\003\001\
\000\000\017\000\018\000\060\000\014\000\015\000\000\000\001\001\
\002\001\003\001\004\001\005\001\006\001\001\001\002\001\003\001\
\000\000\001\001\002\001\003\001\017\001\000\000\017\001\017\001\
\018\001\019\001\044\000\045\000\085\000\017\001\024\001\025\001\
\061\000\017\001\028\001\030\001\013\001\025\001\033\001\013\001\
\028\001\025\001\000\000\001\001\002\001\003\001\004\001\005\001\
\006\001\023\001\027\001\067\000\070\000\069\000\064\000\065\000\
\066\000\003\001\087\000\017\001\076\000\019\001\078\000\000\000\
\080\000\017\001\024\001\025\001\001\000\002\000\028\001\013\001\
\001\001\002\001\003\001\004\001\005\001\004\000\030\001\006\000\
\022\001\013\001\031\001\032\001\000\000\014\001\102\000\013\001\
\017\001\021\001\019\001\012\001\108\000\020\000\020\001\024\001\
\025\001\007\001\008\001\028\001\001\001\002\001\003\001\004\001\
\005\001\000\000\013\001\013\001\016\001\013\001\015\001\018\001\
\018\001\014\001\018\001\014\001\017\001\023\001\019\001\001\001\
\002\001\003\001\017\001\024\001\025\001\018\001\000\000\028\001\
\001\001\002\001\003\001\004\001\005\001\009\001\010\001\011\001\
\062\000\063\000\044\000\045\000\014\001\026\001\001\001\018\001\
\017\001\026\001\019\001\000\000\013\001\029\001\027\001\024\001\
\025\001\023\001\001\001\028\001\018\001\018\001\056\000\058\000\
\016\000\113\000\059\000\076\000\081\000\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\000\000\018\001\013\001\020\001\021\001\022\001\023\001\
\000\000\255\255\026\001\027\001\007\001\008\001\255\255\031\001\
\032\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\000\000\020\001\021\001\022\001\023\001\000\000\255\255\026\001\
\027\001\007\001\008\001\255\255\031\001\032\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\007\001\008\001\
\255\255\031\001\032\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\255\255\020\001\021\001\022\001\023\001\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\031\001\032\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\255\255\255\255\255\255\
\031\001\032\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\031\001\032\001\012\001\
\013\001\014\001\255\255\016\001\255\255\018\001\255\255\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\031\001\032\001\012\001\013\001\014\001\255\255\
\016\001\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\012\001\013\001\014\001\255\255\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\027\001\012\001\013\001\014\001\031\001\032\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\027\001\012\001\013\001\014\001\031\001\032\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\027\001\012\001\013\001\255\255\031\001\032\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\027\001\013\001\255\255\255\255\031\001\032\001\018\001\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\026\001\027\001\
\018\001\255\255\255\255\031\001\032\001\255\255\013\001\255\255\
\026\001\027\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\255\255\018\001\026\001\027\001\255\255\255\255\255\255\
\031\001\032\001\026\001\027\001\255\255\255\255\255\255\031\001\
\032\001\255\255\018\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\026\001\
\027\001"

let yynames_const = "\
  ABS\000\
  TILDA\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  COMMA\000\
  PROJ\000\
  LET\000\
  IN\000\
  END\000\
  BACKSLASH\000\
  DOT\000\
  DEF\000\
  SEMICOLON\000\
  PARALLEL\000\
  LOCAL\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 28 "a3.mly"
                 ( _1 )
# 365 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 31 "a3.mly"
                          ( Disjunction(_1,_3) )
# 373 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 32 "a3.mly"
                          ( _1 )
# 380 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 35 "a3.mly"
                          ( Conjunction(_1,_3) )
# 388 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 36 "a3.mly"
                          ( _1 )
# 395 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 40 "a3.mly"
                          ( Not(_2) )
# 402 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eq_expr) in
    Obj.repr(
# 41 "a3.mly"
                        ( _1 )
# 409 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'eq_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lt_expr) in
    Obj.repr(
# 45 "a3.mly"
                         ( Equals(_1,_3) )
# 417 "a3.ml"
               : 'eq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lt_expr) in
    Obj.repr(
# 46 "a3.mly"
                         ( _1 )
# 424 "a3.ml"
               : 'eq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lt_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gt_expr) in
    Obj.repr(
# 49 "a3.mly"
                          ( LessTE(_1,_4) )
# 432 "a3.ml"
               : 'lt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lt_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gt_expr) in
    Obj.repr(
# 50 "a3.mly"
                        ( LessT(_1,_3) )
# 440 "a3.ml"
               : 'lt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gt_expr) in
    Obj.repr(
# 51 "a3.mly"
                       ( _1 )
# 447 "a3.ml"
               : 'lt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'gt_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 55 "a3.mly"
                               ( GreaterTE(_1,_4) )
# 455 "a3.ml"
               : 'gt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gt_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 56 "a3.mly"
                              ( GreaterT(_1,_3) )
# 463 "a3.ml"
               : 'gt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 57 "a3.mly"
                              ( _1 )
# 470 "a3.ml"
               : 'gt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expr) in
    Obj.repr(
# 61 "a3.mly"
                                ( Sub(_1,_3) )
# 478 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expr) in
    Obj.repr(
# 62 "a3.mly"
                                ( Add(_1,_3) )
# 486 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expr) in
    Obj.repr(
# 63 "a3.mly"
                           ( _1 )
# 493 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 67 "a3.mly"
                          ( Rem(_1,_3) )
# 501 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 68 "a3.mly"
                            ( Mult(_1,_3) )
# 509 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 69 "a3.mly"
                          ( Div(_1,_3) )
# 517 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 70 "a3.mly"
                         ( _1 )
# 524 "a3.ml"
               : 'rem_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 84 "a3.mly"
                           ( Negative(_2))
# 531 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 85 "a3.mly"
                         ( Abs(_2) )
# 538 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 86 "a3.mly"
                           ( _1 )
# 545 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'and_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'and_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 93 "a3.mly"
                                               ( IfThenElse(_2,_4,_6) )
# 554 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj_expr) in
    Obj.repr(
# 94 "a3.mly"
                                      ( _1 )
# 561 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'tup_expr) in
    Obj.repr(
# 98 "a3.mly"
                                      ( Project((_3,_5),_7))
# 570 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tup_expr) in
    Obj.repr(
# 99 "a3.mly"
             ( _1 )
# 577 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rem_par) in
    Obj.repr(
# 103 "a3.mly"
                  ( let a,b = _2 in Tuple(a,b) )
# 584 "a3.ml"
               : 'tup_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "a3.mly"
             (Tuple(0,[]))
# 590 "a3.ml"
               : 'tup_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funCall_expr) in
    Obj.repr(
# 105 "a3.mly"
                 ( _1 )
# 597 "a3.ml"
               : 'tup_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 109 "a3.mly"
                           ( (2,[_1;_3]) )
# 605 "a3.ml"
               : 'rem_par))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_par) in
    Obj.repr(
# 110 "a3.mly"
                           (let x,y = _3 in (x+1,_1::y))
# 613 "a3.ml"
               : 'rem_par))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'funAbs_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 114 "a3.mly"
                               (FunctionCall(_1,_3))
# 621 "a3.ml"
               : 'funCall_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funAbs_expr) in
    Obj.repr(
# 115 "a3.mly"
                ( _1 )
# 628 "a3.ml"
               : 'funCall_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'let_expr) in
    Obj.repr(
# 118 "a3.mly"
                              ( FunctionAbstraction(_2,_4))
# 636 "a3.ml"
               : 'funAbs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_expr) in
    Obj.repr(
# 119 "a3.mly"
             ( _1 )
# 643 "a3.ml"
               : 'funAbs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'local_def) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 123 "a3.mly"
                                  ( Let(_2, _4) )
# 651 "a3.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 124 "a3.mly"
               ( _1 )
# 658 "a3.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 127 "a3.mly"
                   ( InParen(_2) )
# 665 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 128 "a3.mly"
             ( _1 )
# 672 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "a3.mly"
                           ( Var(_1) )
# 679 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 132 "a3.mly"
                           ( N(_1) )
# 686 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 133 "a3.mly"
                            ( B(_1) )
# 693 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'local_def) in
    Obj.repr(
# 139 "a3.mly"
                     ( _1 )
# 700 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'local_def) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_def) in
    Obj.repr(
# 145 "a3.mly"
                                   ( Local(_2, _4) )
# 708 "a3.ml"
               : 'local_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'seq_def) in
    Obj.repr(
# 146 "a3.mly"
            ( _1 )
# 715 "a3.ml"
               : 'local_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_def) in
    Obj.repr(
# 152 "a3.mly"
                                    ( Sequence([_1; _3]) )
# 723 "a3.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_def) in
    Obj.repr(
# 153 "a3.mly"
                                   ( Parallel([_1;_3]) )
# 731 "a3.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_def) in
    Obj.repr(
# 154 "a3.mly"
               ( _1 )
# 738 "a3.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_def) in
    Obj.repr(
# 155 "a3.mly"
                                ( match _3 with
                                    | Parallel(x) -> Parallel (_1:: x)
                                   (* | _ -> Parallel([$3;]) *))
# 748 "a3.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_def) in
    Obj.repr(
# 158 "a3.mly"
                                 ( match _3 with 
                                    | Sequence(x) -> Sequence ( _1:: x)
  (*                                  | _-> Sequence( [$3;] ) *) )
# 758 "a3.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 172 "a3.mly"
                       ( Simple(_2, _4) )
# 766 "a3.ml"
               : 'simple_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'local_def) in
    Obj.repr(
# 173 "a3.mly"
                     ( _2 )
# 773 "a3.ml"
               : 'simple_def))
(* Entry def_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry exp_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let def_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.definition)
let exp_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : A1.exptree)
